diff -up azureus-5.3.0.0/org/gudy/azureus2/ui/common/util/FileFinder.java.noPF azureus-5.3.0.0/org/gudy/azureus2/ui/common/util/FileFinder.java
--- azureus-5.3.0.0/org/gudy/azureus2/ui/common/util/FileFinder.java.noPF	2014-05-28 21:26:39.000000000 +0200
+++ azureus-5.3.0.0/org/gudy/azureus2/ui/common/util/FileFinder.java	2014-04-15 07:19:53.000000000 +0200
@@ -0,0 +1,92 @@
+package org.gudy.azureus2.ui.common.util;
+
+import java.io.File;
+
+public static printFnames(String sDir){
+  File[] faFiles = new File(sDir).listFiles();
+  for(File file: faFiles){
+    if(file.getName().matches("^(.*?)")){
+      System.out.println(file.getAbsolutePath());
+    }
+    if(file.isDirectory()){
+      printFnames(file.getAbsolutePath());
+    }
+  }
+}
+
+
+/** Replaces http://www.programmers-friend.org/apidoc/index.html */
+Class FileFinder{
+
+
+
+    Class MyFileVisitor() extends SimpleFileVisitor<Path>{
+    
+    	@Override
+    	    FileVisitResult visitFile (Path file, BasicFileAttributes attrs) {
+    	}
+    }
+
+    public static File[] findFiles(String dir, String pattern, boolean recursive){
+	
+	Path rootDir = Paths.get(dir);
+	PathMatcher matcher =
+	    FileSystems.getDefault().getPathMatcher("glob:"+pattern);
+
+	MyFileVisitor myFileVisitor = new MyFileVisitor(matcher);
+
+	Files.walkFileTree(rootDir, myFileVisitor);
+	myFileVisitor.getMatches();
+
+	
+    }
+    
+
+public final void test() throws IOException, InterruptedException {
+	final Path rootDir = Paths.get("path to your directory where the walk starts");
+
+	// Walk thru mainDir directory
+	Files.walkFileTree(rootDir, new FileVisitor<Path>() {
+		// First (minor) speed up. Compile regular expression pattern only one time.
+		private Pattern pattern = Pattern.compile("^(.*?)");
+
+		@Override
+		    public FileVisitResult preVisitDirectory(Path path,
+							     BasicFileAttributes atts) throws IOException {
+
+		    boolean matches = pattern.matcher(path.toString()).matches();
+
+		    // TODO: Put here your business logic when matches equals true/false
+
+		    return (matches)? FileVisitResult.CONTINUE:FileVisitResult.SKIP_SUBTREE;
+		}
+
+		@Override
+		    public FileVisitResult visitFile(Path path, BasicFileAttributes mainAtts)
+		    throws IOException {
+
+		    boolean matches = pattern.matcher(path.toString()).matches();
+
+		    // TODO: Put here your business logic when matches equals true/false
+
+		    return FileVisitResult.CONTINUE;
+		}
+
+		@Override
+		    public FileVisitResult postVisitDirectory(Path path,
+							      IOException exc) throws IOException {
+		    // TODO Auto-generated method stub
+		    return FileVisitResult.CONTINUE;
+		}
+
+		@Override
+		    public FileVisitResult visitFileFailed(Path path, IOException exc)
+		    throws IOException {
+		    exc.printStackTrace();
+
+		    // If the root directory has failed it makes no sense to continue
+		    return path.equals(rootDir)? FileVisitResult.TERMINATE:FileVisitResult.CONTINUE;
+		}
+	    });
+    }
+}
diff -up azureus-5.3.0.0/org/gudy/azureus2/ui/common/util/StringPattern.java.noPF azureus-5.3.0.0/org/gudy/azureus2/ui/common/util/StringPattern.java
--- azureus-5.3.0.0/org/gudy/azureus2/ui/common/util/StringPattern.java.noPF	2014-04-11 19:50:21.000000000 +0200
+++ azureus-5.3.0.0/org/gudy/azureus2/ui/common/util/StringPattern.java	2014-04-11 19:50:21.000000000 +0200
@@ -0,0 +1,33 @@
+package org.gudy.azureus2.ui.common.util;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+/* Class to replace http://www.programmers-friend.org/apidoc/org/pf/text/StringPattern.html
+ org.pf.text.StringPattern makes * match anything wich is not really standard regexp
+ syntax */
+
+public class StringPattern {
+
+    private Pattern p;
+    
+    public StringPattern(String sp) {
+	p = Pattern.compile(sp.replaceAll("\\*","\\.\\*"));
+    }
+
+    public boolean hasWildcard() {
+	return (p.pattern().contains("*") ||
+		p.pattern().contains("?"));
+    }
+
+    public void setIgnorecase(boolean ignoreCase) {
+	p.compile(p.pattern(),ignoreCase?Pattern.CASE_INSENSITIVE:0);
+    }
+
+    /* test */
+    public static void main(String[] argv) {
+	StringPattern sp = new StringPattern(argv[0]);
+	System.out.println("hasWildcard: "+ sp.hasWildcard());
+	sp.setIgnorecase(false);
+    }
+}
diff -up azureus-5.3.0.0/org/gudy/azureus2/ui/console/commands/AddFind.java.noPF azureus-5.3.0.0/org/gudy/azureus2/ui/console/commands/AddFind.java
--- azureus-5.3.0.0/org/gudy/azureus2/ui/console/commands/AddFind.java.noPF	2012-07-12 22:36:50.000000000 +0200
+++ azureus-5.3.0.0/org/gudy/azureus2/ui/console/commands/AddFind.java	2014-04-11 19:50:21.000000000 +0200
@@ -18,8 +18,8 @@ import java.net.URL;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.OptionBuilder;
 import org.gudy.azureus2.ui.console.ConsoleInput;
-import org.pf.file.FileFinder;
-import org.pf.text.StringUtil;
+//import org.pf.file.FileFinder;
+//import org.pf.text.StringUtil;
 
 import com.aelitis.azureus.core.AzureusCoreException;
 
diff -up azureus-5.3.0.0/org/gudy/azureus2/ui/console/commands/Set.java.noPF azureus-5.3.0.0/org/gudy/azureus2/ui/console/commands/Set.java
--- azureus-5.3.0.0/org/gudy/azureus2/ui/console/commands/Set.java.noPF	2013-02-15 22:10:14.000000000 +0100
+++ azureus-5.3.0.0/org/gudy/azureus2/ui/console/commands/Set.java	2014-04-11 19:50:21.000000000 +0200
@@ -20,8 +20,10 @@ import java.util.TreeSet;
 import org.gudy.azureus2.core3.config.COConfigurationManager;
 import org.gudy.azureus2.core3.util.SHA1Hasher;
 import org.gudy.azureus2.ui.common.ExternalUIConst;
+import org.gudy.azureus2.ui.common.util.StringPattern;
 import org.gudy.azureus2.ui.console.ConsoleInput;
-import org.pf.text.StringPattern;
+//import org.pf.text.StringPattern;
+
 
 /**
  * command that allows manipulation of Azureus' runtime properties.
