--- org/gudy/azureus2/update/CoreUpdateChecker.java.orig	2006-05-14 08:10:03.000000000 -0700
+++ org/gudy/azureus2/update/CoreUpdateChecker.java	2006-05-26 09:23:28.000000000 -0700
@@ -123,8 +123,6 @@
 		props.setProperty( "plugin.version", plugin_interface.getAzureusVersion());
 		
 		rdf = plugin_interface.getUtilities().getResourceDownloaderFactory();
-	
-		plugin_interface.getUpdateManager().registerUpdatableComponent( this, true );
 	}
 	
 	public String
@@ -143,156 +141,9 @@
 	checkForUpdate(
 		final UpdateChecker	checker )
 	{
-		try{			
-			String	current_version = plugin_interface.getAzureusVersion();
-			
-			log.log( "Update check starts: current = " + current_version );
-													
-			Map	decoded = VersionCheckClient.getSingleton().getVersionCheckInfo(
-		  			first_check?VersionCheckClient.REASON_UPDATE_CHECK_START:VersionCheckClient.REASON_UPDATE_CHECK_PERIODIC);
-
-      
-			displayUserMessage( decoded );
-			
-			String latest_version 			= null;
-			String latest_file_name			= null;
-			
-			byte[] b_version = (byte[])decoded.get("version");
-			
-			if ( b_version != null ){
-			
-				latest_version = new String( b_version );
-				
-				plugin_interface.getPluginProperties().setProperty( LATEST_VERSION_PROPERTY, latest_version );
-				
-			}else{
-				
-				throw( new Exception( "No version found in reply" ));
-			}
-			
-			byte[] b_filename = (byte[]) decoded.get("filename");
-			
-			if ( b_filename != null ){
-			
-				latest_file_name = new String( b_filename );
-			}
-			
-			String	msg = "Core: latest_version = '" + latest_version + "', file = '" + latest_file_name + "'";
-			
-			checker.reportProgress( msg );
-			
-			log.log( msg );
-			
-			if ( !shouldUpdate( current_version, latest_version )){
-				
-				return;
-			}
-				
-			final String	f_latest_version	= latest_version;
-			final String	f_latest_file_name	= latest_file_name;
-			
-
-			ResourceDownloader[]	primary_mirrors;
-				
-			primary_mirrors = getPrimaryDownloaders( latest_file_name );
-
-				// the download hierarchy is primary mirrors first (randomised alternate)
-				// then backup mirrors (randomised alternate)
-			
-				// we don't want to load the backup mirrors until the primary mirrors fail
-			
-			ResourceDownloader		random_primary_mirrors = rdf.getRandomDownloader( primary_mirrors );
-			
-			ResourceDownloader		backup_downloader =
-				rdf.create(
-					new ResourceDownloaderDelayedFactory()
-					{
-						public ResourceDownloader
-						create()
-						{
-							ResourceDownloader[]	backup_mirrors = getBackupDownloaders( f_latest_file_name );
-						
-							return( rdf.getRandomDownloader( backup_mirrors ));
-						}
-					});
-			
-			ResourceDownloader	top_downloader = 
-				rdf.getAlternateDownloader( 
-						new ResourceDownloader[]
-							{
-								random_primary_mirrors,
-								backup_downloader,
-							});
-			
-
-			top_downloader.addListener( rd_logger );
-			
-				// get size so it is cached
-			
-			top_downloader.getSize();		
-							
-
-			byte[]	info_b = (byte[])decoded.get( "info" );
-			
-			String	info = null;
-			
-			if ( info_b != null ){
-			
-				try{
-					info = new String( info_b );
-				
-				}catch( Throwable e ){
-					
-					Debug.printStackTrace( e );
-				}
-			}
-			
-			String[]	desc;
-			
-			if ( info == null ){
-				
-				desc = new String[]{"Core Azureus Version" };
-				
-			}else{
-				
-				desc = new String[]{"Core Azureus Version", info };
-			}
-			
-			final Update update = 
-				checker.addUpdate(
-						"Core Azureus Version",
-						desc,
-						latest_version,
-						top_downloader,
-						Update.RESTART_REQUIRED_YES );
-			
-			top_downloader.addListener( 
-					new ResourceDownloaderAdapter()
-					{
-						public boolean
-						completed(
-							final ResourceDownloader	downloader,
-							InputStream					data )
-						{	
-							installUpdate( checker, update, downloader, f_latest_version, data );
-									
-							return( true );
-						}
-					});
-		}catch( Throwable e ){
-			
-			log.log( e );
-			
-			Debug.printStackTrace( e );
-			
-			checker.failed();
-			
-		}finally{
-			
 			checker.completed();
 			
 			first_check = false;
-		}
 	}
 	
       
